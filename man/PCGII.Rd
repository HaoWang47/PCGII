% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCGII.R
\name{PCGII}
\alias{PCGII}
\title{PCGII() is the function to apply the proposed method to get the estimated partial correlation graph with information incorporation}
\usage{
PCGII(df, prior, lambda)
}
\arguments{
\item{df}{The main expression dataset, an n by p matrix, in which each row corresponds to a sample and each column represents expression/abundance of an omics feature.}

\item{prior}{The prior set, a k by 2 dataframe, in which each row corresponds to a pair of nodes (any omics features) that are connected under prior belief. Note, prior input has to be dataframe.}

\item{lambda}{The regularization parameter, used in the node-wise regression. If missing, default lambda will be used which is at the order of sqrt(2*log(p)/n).}
}
\value{
A list. The list contains estimated partial correlation matrix (Est), sparse partial correlation estimation matrix with threshold (EstThresh), estimated kappa (kappa), estimated test statistics matrix of partial correlations (tscore), sample size (n) and number of nodes (p).
}
\description{
PCGII() is the function to apply the proposed method to get the estimated partial correlation graph with information incorporation
}
\examples{
# Simulating data
set.seed(1234567)
n=50 # sample size
p=30 # number of nodes

omega=make_random_precision_mat(eta=.01, p=p)

# population covariance matrix, which is used to generate data
Sigma=solve(omega)
# simulate expression data
X = rmvnorm(n = n, sigma = Sigma)

lam=2*sqrt(log(p)/n) ## fixed lambda

# directed prior network
prior_set=as.data.frame(matrix(data=c(5,6, 28,24), nrow=2, ncol=2, byrow = TRUE))
colnames(prior_set)=c("row", "col")
prior_set=undirected_prior(prior_set)
PCGII_out=PCGII(df=X, prior=prior_set, lambda = lam)
inference_out=inference(list=PCGII_out1)
diag(inference_out)=0
net=inference_out \%>\% graph_from_adjacency_matrix(mode = "undirected")
net \%>\% plot(vertex.size=4, vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5, layout=layout_in_circle(net))
## Remark: mathematical standardization will be automatically done within the function.
}
